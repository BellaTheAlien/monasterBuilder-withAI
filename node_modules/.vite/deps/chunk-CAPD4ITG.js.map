{
  "version": 3,
  "sources": ["../../@langchain/core/dist/tools/types.js"],
  "sourcesContent": ["import { Runnable, } from \"../runnables/base.js\";\nimport { isInteropZodSchema, } from \"../utils/types/zod.js\";\n/**\n * Confirm whether the inputted tool is an instance of `StructuredToolInterface`.\n *\n * @param {StructuredToolInterface | JSONSchema | undefined} tool The tool to check if it is an instance of `StructuredToolInterface`.\n * @returns {tool is StructuredToolInterface} Whether the inputted tool is an instance of `StructuredToolInterface`.\n */\nexport function isStructuredTool(tool) {\n    return (tool !== undefined &&\n        Array.isArray(tool.lc_namespace));\n}\n/**\n * Confirm whether the inputted tool is an instance of `RunnableToolLike`.\n *\n * @param {unknown | undefined} tool The tool to check if it is an instance of `RunnableToolLike`.\n * @returns {tool is RunnableToolLike} Whether the inputted tool is an instance of `RunnableToolLike`.\n */\nexport function isRunnableToolLike(tool) {\n    return (tool !== undefined &&\n        Runnable.isRunnable(tool) &&\n        \"lc_name\" in tool.constructor &&\n        typeof tool.constructor.lc_name === \"function\" &&\n        tool.constructor.lc_name() === \"RunnableToolLike\");\n}\n/**\n * Confirm whether or not the tool contains the necessary properties to be considered a `StructuredToolParams`.\n *\n * @param {unknown | undefined} tool The object to check if it is a `StructuredToolParams`.\n * @returns {tool is StructuredToolParams} Whether the inputted object is a `StructuredToolParams`.\n */\nexport function isStructuredToolParams(tool) {\n    return (!!tool &&\n        typeof tool === \"object\" &&\n        \"name\" in tool &&\n        \"schema\" in tool &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (isInteropZodSchema(tool.schema) ||\n            (tool.schema != null &&\n                typeof tool.schema === \"object\" &&\n                \"type\" in tool.schema &&\n                typeof tool.schema.type === \"string\" &&\n                [\"null\", \"boolean\", \"object\", \"array\", \"number\", \"string\"].includes(tool.schema.type))));\n}\n/**\n * Whether or not the tool is one of StructuredTool, RunnableTool or StructuredToolParams.\n * It returns `is StructuredToolParams` since that is the most minimal interface of the three,\n * while still containing the necessary properties to be passed to a LLM for tool calling.\n *\n * @param {unknown | undefined} tool The tool to check if it is a LangChain tool.\n * @returns {tool is StructuredToolParams} Whether the inputted tool is a LangChain tool.\n */\nexport function isLangChainTool(tool) {\n    return (isStructuredToolParams(tool) ||\n        isRunnableToolLike(tool) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        isStructuredTool(tool));\n}\n"],
  "mappings": ";;;;;;AAQO,SAAS,iBAAiB,MAAM;AACnC,SAAQ,SAAS,UACb,MAAM,QAAQ,KAAK,YAAY;AACvC;AAOO,SAAS,mBAAmB,MAAM;AACrC,SAAQ,SAAS,UACb,SAAS,WAAW,IAAI,KACxB,aAAa,KAAK,eAClB,OAAO,KAAK,YAAY,YAAY,cACpC,KAAK,YAAY,QAAQ,MAAM;AACvC;AAOO,SAAS,uBAAuB,MAAM;AACzC,SAAQ,CAAC,CAAC,QACN,OAAO,SAAS,YAChB,UAAU,QACV,YAAY;AAAA,GAEX,mBAAmB,KAAK,MAAM,KAC1B,KAAK,UAAU,QACZ,OAAO,KAAK,WAAW,YACvB,UAAU,KAAK,UACf,OAAO,KAAK,OAAO,SAAS,YAC5B,CAAC,QAAQ,WAAW,UAAU,SAAS,UAAU,QAAQ,EAAE,SAAS,KAAK,OAAO,IAAI;AACpG;AASO,SAAS,gBAAgB,MAAM;AAClC,SAAQ,uBAAuB,IAAI,KAC/B,mBAAmB,IAAI;AAAA,EAEvB,iBAAiB,IAAI;AAC7B;",
  "names": []
}
